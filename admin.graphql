type Query {
  verifyOtp(verify: VerifyInput): Jwt
  getAddresses: User
  getInventoryItem(id: ID): InventoryItem
  inventoryItems(family:String!): [InventoryItem]
  banner(id:ID!): Banner
  getchef(id:ID!):Chef
  getchefs:[Chef]
  getMenu(id:ID!): [Menu]
  getOrdersbyDate(dateISO:String!):[Order]
  getOrdersByChef(chefId:String!, status:String!):[Order]
}

type Mutation {
  checkPhonenSend(phone: String!): UserWithOTP
  inventoryItem(obj: InventoryItemInput): InventoryItem
  deleteinventoryItem(id: ID):InventoryItem
  inventoryAdd(family:String!): InventoryItem
  liveToggle(id:ID!, status:Boolean): InventoryItem
  carousel(id:ID!, payload:[GalleryInput]):Banner
  newchef(chef:ChefInput):Chef
  editchef(chef:ChefInput, id:ID!):Chef
  editMenu(chefId:String, inventoryid:String, enable:Boolean):Menu
  setToPickup(orderid:String):Boolean
}

# employee stuff

type Address {
  location: Location!
  building: String!
  area: String!
  landmark: String
}

type Location {
  type: String!
  coordinates: [Float!]!
}

type User {
  _id: ID!
  phone: String!
  name: String
}

# app auth stuff

input VerifyInput {
  phone: String!
  otp: String!
  uid:String!
}
type Jwt {
  token: String!
}

# for carousel 

type Banner {
  gallery: [Gallery]
  _id: ID!
}

type UserWithOTP {
  user: User
  otp: String
}

# inventory CRUD

type InventoryItem {
  _id: ID!
  name: String!
  description: String
  enable: Boolean
  gallery: [Gallery]
  family: [String]
  tags: [String]
  category: [Category]
}

type Category {
  price: Float
  name: String
  _id: ID
}
type Gallery {
  name: String
  url: String
  id: String
  route: String
  _id: ID
}

input CategoryInput {
  price: Float
  name: String
  id: String
}
input GalleryInput {
  name: String!
  url: String!
  id: String!
  route:String
}


input InventoryItemInput {
  _id: ID!
  name: String!
  description: String
  gallery: [GalleryInput]
  tags: [String]
  family: [String]
  category: [CategoryInput]
}


# chef stuff
type Chef {
  _id: ID
  name: String!
  displayname: String!
  phone: String!
  location: Location
  address: chefAddress
  pincode: String!
}

input ChefInput {
  name: String!
  displayname: String!
  phone: String!
  location: [Float!]!
  address: AddressInput
  pincode: String!
}

input AddressInput {
  building: String!
  area: String!
  landmark: String!
}
type chefAddress {
  building: String!
  area: String!
  landmark: String!
}
type Menu {
  inventoryid: ID!
  chefId: ID!
  enable: Boolean
}

type Address {
  _id: ID,
  location: Location!
  building: String!
  area: String!
  pincode: String!
  landmark: String
  label: [String]!
}

type Location {
  type: String!
  coordinates: [Float!]!
}

type User {
  _id: ID!
  phone: String!
  name: String
  addresses: [Address]
  fcmToken: String
}

type OrderItem{
  chefid:ID!
  pdtid:ID!
  catid:ID!
  _id:ID!
  quantity: Float!
}

type Order{
  address:Address
  customerid:ID!
  items: [OrderItem]
  _id:ID!
  mode:String
  status:String
  total:Float
  dod:String
  createdAt: String
  userInfo: [User]
}
